package gay.nns.client.impl.feature.exploit;

import com.sun.java.accessibility.util.EventQueueMonitor;
import gay.nns.client.api.event.interfaces.Subscribe;
import gay.nns.client.api.feature.Feature;
import gay.nns.client.api.feature.enums.FeatureCategory;
import gay.nns.client.api.feature.interfaces.SerializeFeature;
import gay.nns.client.api.setting.annotations.SerializeSetting;
import gay.nns.client.api.setting.annotations.SettingMode;
import gay.nns.client.impl.event.packet.EventPacketReceive;
import gay.nns.client.impl.event.packet.EventPacketSend;
import gay.nns.client.impl.event.player.EventPostMotion;
import gay.nns.client.impl.event.player.EventPreMotion;
import gay.nns.client.impl.event.render.EventRender2D;
import gay.nns.client.util.math.UtilTimer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S2APacketParticles;

import java.util.ArrayList;
import java.util.List;

@SerializeFeature(name = "Disabler", description = "Disables all features", category = FeatureCategory.EXPLOIT)
public class FeatureDisabler extends Feature {

    @SerializeSetting(name = "Mode")
    @SettingMode(modes = {"Minemen", "Hypixel", "Minemen2", "Sprint Packet"})
    public String mode = "Minemen";

    private final UtilTimer utilTimer = new UtilTimer();

    private List<Packet> packets = new ArrayList<>();

    private int ticks = 0;

    private final List<Packet<?>> chokedPackets = new ArrayList<>();
    private final List<Packet<?>> chokedMovements = new ArrayList<>();
    private int ticksPassed;

    public FeatureDisabler() {
        super();
    }

    @Override
    protected void onEnable() {
        super.onEnable();
    }

    @Override
    protected void onDisable() {
        super.onDisable();
    }

    // C0b
    // C0f
    // 2x velo : cancel velo
    // 2x hits : reach 6

    @Subscribe
    public void onRender2D(final EventRender2D eventRender2D) {
        this.setSuffix(mode);
    }

    @Subscribe
    public void onPacketSend(final EventPacketSend event) {
        Packet<?> packet = event.getPacket();

        switch (mode.toLowerCase()) {
            case "minemen" -> {
                if (packet instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
            }
            case "hypixel" -> {
                if (packet instanceof C17PacketCustomPayload) {
                    event.setCancelled(true);
                }
            }
            case "minemen2" -> {
                if (event.getPacket() instanceof C0BPacketEntityAction entityAction)
                    if (entityAction.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || entityAction.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)
                        event.setCancelled(true);

                if ((mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) || (mc.thePlayer == null && packet instanceof C00PacketKeepAlive)) {
                    chokedMovements.clear();
                    chokedPackets.clear();
                    return;
                }
                if (packet instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                    chokedPackets.add(packet);
                }
                if (packet instanceof C00PacketKeepAlive && chokedPackets.size() > 0) {
                    event.setCancelled(true);
                    chokedMovements.add(packet);
                }
                if (packet instanceof C03PacketPlayer paket && chokedPackets.size() > 0) {
                    paket.setY = paket.getPositionY() - 0.0425;
                }
            }
            case "sprint packet" -> {
                if (event.getPacket() instanceof C0BPacketEntityAction entityAction)
                    if (entityAction.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || entityAction.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)
                        event.setCancelled(true);
            }
        }
    }

    @Subscribe
    public void onPacketReceive(final EventPacketReceive event) {
        Packet<?> packet = event.getPacket();

        switch (mode.toLowerCase()) {
            case "minemen" -> {
                if (packet instanceof S12PacketEntityVelocity packetEntityVelocity) {
                    if (packetEntityVelocity.getEntityID() == mc.thePlayer.getEntityId()) {
                        ticks++;
                        if (ticks % 2 == 0) {
                            event.setCancelled(true);
                        }
                    }
                }
            }
            case "minemen2" -> {
                if (event.getPacket() instanceof S2APacketParticles) event.setCancelled(true);

                if (packet instanceof S12PacketEntityVelocity packetEntityVelocity) {
                    if (packetEntityVelocity.getEntityID() == mc.thePlayer.getEntityId()) {
                        ticks++;
                        if (ticks % 2 == 0) {
                            event.setCancelled(true);
                        }
                    }
                }
            }
        }
    }

    @Subscribe
    public void preMotionEvent(EventPreMotion event) {
        switch (mode.toLowerCase()) {
            //XD
            case "minemen2" -> {
                if (ticksPassed >= 3 && chokedPackets.size() > 0) {
                    while (chokedPackets.size() > 28) {
                        var npkt = chokedPackets.remove(0);
                        mc.getNetHandler().addToSendQueueNoEvent(npkt);
                    }
                    while (chokedMovements.size() > 0) {
                        mc.thePlayer.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
                        var npkt = chokedMovements.remove(0);
                        if (npkt != null) {
                            mc.getNetHandler().addToSendQueueNoEvent(npkt);
                        }
                    }
                    ticksPassed = 0;
                }
                ticksPassed++;
            }
        }
    }
}
