package gay.nns.client.feature.impl.exploit;

import gay.nns.client.event.api.interfaces.Subscribe;
import gay.nns.client.feature.api.enums.FeatureCategory;
import gay.nns.client.feature.api.interfaces.SerializeFeature;
import gay.nns.client.setting.api.annotations.SettingMode;
import gay.nns.client.setting.api.annotations.SerializeSetting;
import gay.nns.client.setting.api.annotations.SettingSlider;
import gay.nns.client.event.impl.player.EventPreMotion;
import gay.nns.client.event.impl.player.EventUpdate;
import gay.nns.client.event.impl.render.EventRender2D;
import gay.nns.client.feature.api.types.Feature;
import gay.nns.client.util.player.UtilMovement;
import gay.nns.client.util.player.UtilPlayer;
import net.minecraft.util.BlockPos;

@SerializeFeature(name = "AntiVoid", description = "Prevents you from falling into the void", category = FeatureCategory.EXPLOIT)
public class FeatureAntiVoid extends Feature {

    @SerializeSetting(name = "Mode")
    @SettingMode(modes = {"Vanilla", "Position"})
    public String mode = "Vanilla";

    @SerializeSetting(name = "Fall_Distance")
    @SettingSlider(min = 0.0D, max = 10.0D, increment = 0.05D)
    public double fallDistance = 3.0D;

    private BlockPos lastSafePos;

    public FeatureAntiVoid() {
        super();
    }

    @Override
    protected void onEnable() {
        super.onEnable();
    }

    @Override
    protected void onDisable() {
        super.onDisable();
    }

    @Subscribe
    public void onRender2D(final EventRender2D render2DEvent) {
        this.setSuffix(mode);
    }

    @Subscribe
    public void onPreMotion(EventPreMotion event) {
        switch (mode.toLowerCase()) {
            case "position": {
                if (mc.thePlayer.fallDistance > this.fallDistance && UtilPlayer.isOverVoid()) {
                    event.setY(event.getY() + mc.thePlayer.fallDistance);
                    if (mc.gameSettings.keyBindForward.isKeyDown()) {
                        mc.thePlayer.motionX = 0.1f;
                        mc.thePlayer.motionZ = 0.1f;
                    }
                }
                break;
            }
        }
    }


    @Subscribe

    public void onUpdate(final EventUpdate updateEvent) {
        switch (mode.toLowerCase()) {
            case "vanilla": {
                if (UtilPlayer.onGround(0.0D) && mc.thePlayer.onGround) {
                    this.lastSafePos = new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
                }

                if (UtilPlayer.isOverVoid() && this.lastSafePos != null && (double) mc.thePlayer.fallDistance >= 2) {
                    mc.thePlayer.setPositionAndUpdate(this.lastSafePos.getX(), this.lastSafePos.getY(), this.lastSafePos.getZ());
                    UtilMovement.setSpeed(0.0D);
                }

                if (mc.thePlayer.isDead) {
                    this.lastSafePos = null;
                }
                break;
            }
        }
    }
}
